package com.weatherverse.chatbot;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.json.JSONObject;
import java.util.regex.Pattern;

@Service
public class ChatbotService {

    @Autowired
    private WeatherApiService weatherApiService;

    private final WebClient webClient = WebClient.builder().build();

    public String processQuery(String userMessage) {
        String normalizedMessage = userMessage.toLowerCase();
        
        // Extract location
        String location = extractLocation(normalizedMessage);
        if (location == null) location = "Mumbai"; // default
        
        // Determine query type and generate response
        if (isWeatherQuery(normalizedMessage)) {
            return handleWeatherQuery(normalizedMessage, location);
        } else if (isActivityQuery(normalizedMessage)) {
            return handleActivityQuery(normalizedMessage, location);
        } else {
            return "‡§Æ‡•à‡§Ç weather ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§µ‡§æ‡§≤‡•ã‡§Ç ‡§ï‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•Å‡§õ ‡§î‡§∞ ‡§™‡•Ç‡§õ‡§ø‡§è ‡§ú‡•à‡§∏‡•á '‡§Ü‡§ú ‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä ‡§Æ‡•á‡§Ç ‡§Æ‡•å‡§∏‡§Æ ‡§ï‡•à‡§∏‡§æ ‡§π‡•à?' ‡§Ø‡§æ 'running ‡§ï‡•á ‡§≤‡§ø‡§è best time ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?'";
        }
    }

    private String extractLocation(String message) {
        String[] cities = {"mumbai", "delhi", "bangalore", "chennai", "kolkata", "hyderabad", "pune", "ahmedabad", "jaipur", "lucknow"};
        for (String city : cities) {
            if (message.contains(city)) {
                return city;
            }
        }
        return null;
    }

    private boolean isWeatherQuery(String message) {
        return message.contains("mausam") || message.contains("weather") || message.contains("barish") || 
               message.contains("dhoop") || message.contains("temperature") || message.contains("garmi") ||
               message.contains("sardi") || message.contains("rain");
    }

    private boolean isActivityQuery(String message) {
        return message.contains("running") || message.contains("exercise") || message.contains("walk") ||
               message.contains("outdoor") || message.contains("best time") || message.contains("suggest");
    }

    private String handleWeatherQuery(String message, String location) {
        try {
            JSONObject weatherData = weatherApiService.getCurrentWeather(location);
            
            if (message.contains("barish") || message.contains("rain")) {
                return generateRainResponse(weatherData, location);
            } else {
                return generateGeneralWeatherResponse(weatherData, location);
            }
        } catch (Exception e) {
            return "Sorry, ‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä " + location + " ‡§ï‡§æ weather data ‡§®‡§π‡•Ä‡§Ç ‡§≤‡§æ ‡§™‡§æ ‡§∞‡§π‡§æ‡•§ ‡§ï‡•Å‡§õ ‡§¶‡•á‡§∞ ‡§¨‡§æ‡§¶ try ‡§ï‡§∞‡•á‡§Ç‡•§";
        }
    }

    private String handleActivityQuery(String message, String location) {
        try {
            JSONObject weatherData = weatherApiService.getCurrentWeather(location);
            return generateActivitySuggestion(weatherData, location);
        } catch (Exception e) {
            return "Sorry, ‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä weather data ‡§ï‡•á ‡§¨‡§ø‡§®‡§æ suggestion ‡§®‡§π‡•Ä‡§Ç ‡§¶‡•á ‡§™‡§æ ‡§∞‡§π‡§æ‡•§";
        }
    }

    private String generateRainResponse(JSONObject weatherData, String location) {
        JSONObject current = weatherData.getJSONObject("current");
        String condition = current.getJSONObject("condition").getString("text").toLowerCase();
        
        if (condition.contains("rain") || condition.contains("drizzle")) {
            return "‡§π‡§æ‡§Ç, " + location + " ‡§Æ‡•á‡§Ç ‡§Ö‡§≠‡•Ä ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à! ‚òî ‡§¨‡§æ‡§π‡§∞ ‡§ú‡§æ‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á umbrella ‡§≤‡•á ‡§ú‡§æ‡§®‡§æ‡•§";
        } else if (condition.contains("cloud")) {
            return location + " ‡§Æ‡•á‡§Ç ‡§Ö‡§≠‡•Ä clouds ‡§π‡•à‡§Ç, ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§ üå•Ô∏è Umbrella ‡§∏‡§æ‡§• ‡§∞‡§ñ‡§®‡§æ ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•ã‡§ó‡§æ‡•§";
        } else {
            return "‡§®‡§π‡•Ä‡§Ç, " + location + " ‡§Æ‡•á‡§Ç ‡§Ö‡§≠‡•Ä ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∞‡§π‡•Ä‡•§ ‡§Æ‡•å‡§∏‡§Æ " + condition + " ‡§π‡•à‡•§ ‚òÄÔ∏è";
        }
    }

    private String generateGeneralWeatherResponse(JSONObject weatherData, String location) {
        JSONObject current = weatherData.getJSONObject("current");
        double temp = current.getDouble("temp_c");
        String condition = current.getJSONObject("condition").getString("text");
        
        String emoji = getWeatherEmoji(condition);
        return location + " ‡§Æ‡•á‡§Ç ‡§Ö‡§≠‡•Ä temperature " + temp + "¬∞C ‡§π‡•à ‡§î‡§∞ ‡§Æ‡•å‡§∏‡§Æ " + condition + " ‡§π‡•à‡•§ " + emoji;
    }

    private String generateActivitySuggestion(JSONObject weatherData, String location) {
        JSONObject current = weatherData.getJSONObject("current");
        double temp = current.getDouble("temp_c");
        String condition = current.getJSONObject("condition").getString("text").toLowerCase();
        
        if (temp < 15) {
            return "‡§Ö‡§≠‡•Ä " + location + " ‡§Æ‡•á‡§Ç " + temp + "¬∞C ‡§π‡•à‡•§ Running ‡§ï‡•á ‡§≤‡§ø‡§è perfect time ‡§π‡•à! üèÉ‚Äç‚ôÇÔ∏è ‡§∏‡•Å‡§¨‡§π 7-9 AM ‡§Ø‡§æ ‡§∂‡§æ‡§Æ 5-7 PM best ‡§π‡•ã‡§ó‡§æ‡•§";
        } else if (temp > 30) {
            return location + " ‡§Æ‡•á‡§Ç ‡§Ö‡§≠‡•Ä " + temp + "¬∞C ‡§π‡•à, ‡§ï‡§æ‡§´‡•Ä ‡§ó‡§∞‡•ç‡§Æ‡•Ä ‡§π‡•à‡•§ üå°Ô∏è Running ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§¨‡§π 5-7 AM ‡§Ø‡§æ ‡§∞‡§æ‡§§ 8-10 PM ‡§ï‡§æ time choose ‡§ï‡§∞‡•á‡§Ç‡•§";
        } else if (condition.contains("rain")) {
            return "‡§Ö‡§≠‡•Ä " + location + " ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‚òî Indoor exercise ‡§ï‡§∞‡§®‡§æ ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•ã‡§ó‡§æ ‡§Ø‡§æ ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§∞‡•Å‡§ï‡§®‡•á ‡§ï‡§æ wait ‡§ï‡§∞‡•á‡§Ç‡•§";
        } else {
            return location + " ‡§Æ‡•á‡§Ç ‡§Æ‡•å‡§∏‡§Æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à (" + temp + "¬∞C)! üå§Ô∏è Running ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä ‡§Ö‡§ö‡•ç‡§õ‡§æ time ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® ‡§∏‡•Å‡§¨‡§π-‡§∂‡§æ‡§Æ ‡§î‡§∞ ‡§≠‡•Ä ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•ã‡§ó‡§æ‡•§";
        }
    }

    private String getWeatherEmoji(String condition) {
        condition = condition.toLowerCase();
        if (condition.contains("sunny") || condition.contains("clear")) return "‚òÄÔ∏è";
        if (condition.contains("rain")) return "üåßÔ∏è";
        if (condition.contains("cloud")) return "‚òÅÔ∏è";
        if (condition.contains("snow")) return "‚ùÑÔ∏è";
        return "üå§Ô∏è";
    }
}